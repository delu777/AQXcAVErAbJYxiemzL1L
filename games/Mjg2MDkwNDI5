local ReplicatedStorage = game:GetService("ReplicatedStorage")
--mopsHub - Arsenal
--script messy as fuck ik. ill remake it soon

local s,e = pcall(function()
    if not(game.PlaceId == 286090429) then return end
    repeat
		task.wait()
	until game:IsLoaded()
    if getgenv().__mpho_1__loaded__ == true then return warn("[mopsHub Loader]: mopsHub is already loaded.") end
	getgenv().__mpho_1__loaded__ = true

    getgenv = getgenv

    --MODULES
	local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
    local ESPFramework = loadstring(game:HttpGet("https://raw.githubusercontent.com/NougatBitz/Femware-Leak/main/ESP.lua", true))()
	local writeclipboard,encodeb64,decodeb64,Request = ((syn and syn.write_clipboard) or setclipboard),((syn and syn.crypt.base64.encode) or (Krnl and Krnl.Base64.Encode)),((syn and syn.crypt.base64.decode) or (Krnl and Krnl.Base64.Decode)),(http_request or syn and syn.request or request or nil)
    local standard_firerate_values = {}
	local Player = game:GetService("Players").LocalPlayer
    local Client = getsenv(Player.PlayerGui.GUI.Client)
	local settings = {
		autoLoadConfigs = nil,
	}
    local ESPSettings = {
        PlayerESP = {
            Enabled = getgenv()._esp,
            TracersOn = getgenv()._esptracers,
            BoxesOn = getgenv()._espboxes,
            NamesOn = getgenv()._espnames,
            DistanceOn = getgenv()._espdistance,
            AttachShift = getgenv()._esptracerattachshift,
            HealthOn = false,
            ToolOn = false,
            TeamMates = getgenv()._espteamcheck,
            FaceCamOn = false,
            Distance = 2000,
        },
        ESPColor = Color3.fromRGB(255, 255, 255),
        ToolColor = Color3.fromRGB(255, 255, 255)
    }

    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")

    --STUFF THAT NEEDS TO RUN AT EXECUTE
	if isfile("/mopsHub/settings_arsenal.mhs") then
		local s,e = pcall(function()
			local file_settings = readfile("/mopsHub/settings_arsenal.mhs")
			local parsedSettings = {}
			local s,e = pcall(function()
				parsedSettings = game:GetService("HttpService"):JSONDecode(file_settings)
			end)
			if s then
				for _,v in pairs(parsedSettings) do
					settings[_] = v
				end
			else
				warn("[mopsHub Error]: Unable to parse local saved settings json.\nError:\n\n> ".. e)
			end
		end)
		if not s and e then
			print(e)
		end
	else
		autoLoadConfigs = true
		writefile("/mopsHub/settings_arsenal.mhs", tostring(game:GetService("HttpService"):JSONEncode(settings)))
		print("[mopsHub Debug]: Created local config file.")
	end

    --ENV
    getgenv().ESPFramework = ESPFramework
    getgenv()._esptracerattachshift = 1
	getgenv()._WINDOW = {
		Tabs = {},
	}

	--WINDOW CONFIG
	local _TABS = {
		"Weapon",
		"Visual",
		"Character",
		"Misc",
		"Settings",
		"Credits"
	}

    local _FUNCTIONS = {
        ["Weapon"] = {
            {
				Function = "CreateSection",
				Args = "━ Aimbot ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Silent Aimbot",
					Flag = "_slientaimbot",
					Callback = function(Value)
						getgenv()._slientaimbot = Value
                        local cam = workspace.CurrentCamera
                        local mouse = Player:GetMouse()
                        local gmt = getrawmetatable(game)
                        local nc = gmt.__namecall
                        local old = gmt.__index
                        local function ClosestPlayer()
                            local dis, target = math.huge, nil
                            for _, v in pairs(Players.GetPlayers(Players)) do
                                if v == Player then
                                    continue
                                end; if v.Team == Player then
                                    continue
                                end; if not v.Character then
                                    continue
                                end
                                local head = v.Character.FindFirstChild(v.Character, "Head")
                                if not head then
                                    continue
                                end
                                local screenpos, vis = cam.WorldToScreenPoint(cam, head.Position)
                                if not vis then
                                    continue
                                end
                                local p1, p2 = Vector2.new(mouse.X, mouse.Y), Vector2.new(screenpos.X, screenpos.Y)
                                local mag = (p2 - p1).Magnitude
                                if mag < dis and mag < getgenv()._fov then
                                    dis = mag
                                    target = v
                                end
                            end
                            return target
                        end
                        setreadonly(gmt, false)
                        gmt.__namecall = newcclosure(function(self, ...)
                            local args, method = {
                                ...
                            }, getnamecallmethod()
                            if getgenv()._slientaimbot and method == "FindPartOnRayWithIgnoreList" and not checkcaller() then
                                local target = ClosestPlayer()
                                if target and target.Character and target.Character.FindFirstChild(target.Character, getgenv().getHitPart()) then
                                    args[1] = Ray.new(cam.CFrame.Position, (target.Character[getgenv().getHitPart()].Position - cam.CFrame.Position).Unit * 1000)
                                    return nc(self, unpack(args))
                                end
                            end
                            return nc(self, ...)
                        end)
                        gmt.__index = newcclosure(function(self, i)
                            if i == "Clips" then
                                return workspace.Map
                            end
                            return old(self, i)
                        end)
                        setreadonly(gmt, true)
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState = "Head",
				Args = {
					Name = "Hit Part",
					Flag = "_silentaimhitpart",
					Options = {"Head","LowerTorso","Random"},
					CurrentOption = "Head",
					Callback = function(Value)
						getgenv()._silentaimhitpart = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                _envState = 100,
                Args = {
                    Name = "FOV",
                    Flag = "_fov",
                    CurrentValue = 100,
                    Range = {10, 750},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._fov = Value
                    end
                }
            },
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Show FOV",
					Flag = "_showfov",
					Callback = function(Value)
						getgenv()._showfov = Value
					end,
				}
			},
            --[[{
				Function = "CreateSection",
				Args = "━ Kill Aura ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Kill Aura",
					Flag = "_killaura",
					Callback = function(Value)
						getgenv()._killaura = Value
					end,
				}
			},]]
            {
				Function = "CreateSection",
				Args = "━ Gun Mods ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Ammo",
					Flag = "_infammo",
					Callback = function(Value)
						getgenv()._infammo = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "No Recoil",
					Flag = "_norecoil",
					Callback = function(Value)
						getgenv()._norecoil = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "No Spread",
					Flag = "_nospread",
					Callback = function(Value)
						getgenv()._nospread = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Rapid Fire",
					Flag = "_rapidfire",
					Callback = function(Value)
						getgenv()._rapidfire = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Automatic",
					Flag = "_automatic",
					Callback = function(Value)
						getgenv()._automatic = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState = false,
				Args = {
					Name = "Rainbow Gun",
					Flag = "_rainbowgun",
					Callback = function(Value)
						getgenv()._rainbowgun = Value
					end,
				}
			},
        },
        ["Visual"] = {
            {
				Function = "CreateSection",
				Args = "━ ESP ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "ESP",
					Flag = "_esp",
					Callback = function(Value)
						getgenv()._esp = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Boxes",
					Flag = "_espboxes",
					Callback = function(Value)
						getgenv()._espboxes = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Tracers",
					Flag = "_esptracers",
					Callback = function(Value)
						getgenv()._esptracers = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState = "Bottom",
				Args = {
					Name = "Tracers Orientation",
					Flag = "_tracersorientation",
					Options = {"Bottom","Middle","Top"},
					CurrentOption = "Bottom",
					Callback = function(Value)
                        local v = 0

                        if Value == "Bottom" then
                            v = 1
                        elseif Value == "Middle" then
                            v = 2
                        elseif Value == "Top" then
                            v = 1000
                        end
						getgenv()._esptracerattachshift = v or 0
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Names",
					Flag = "_espnames",
					Callback = function(Value)
						getgenv()._espnames = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Distance",
					Flag = "_espdistance",
					Callback = function(Value)
						getgenv()._espdistance = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState = true,
				Args = {
					Name = "Team Check",
					Flag = "_espteamcheck",
					Callback = function(Value)
						getgenv()._espteamcheck = not Value
                        getgenv().updateespvalues()
					end,
				}
			},
        },
        ["Character"] = {
            {
				Function = "CreateSection",
				Args = "━ Walkspeed Changer ━",
			},
            {
                Function = "CreateSlider",
                _envState = 16,
                Args = {
                    Name = "Walkspeed",
                    Flag = "_walkspeed",
                    CurrentValue = 16,
                    Range = {16, 250},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._walkspeed = Value
                    end
                }
            },
            {
				Function = "CreateSection",
				Args = "━ God Mode ━",
			},
            {
                Function = "CreateButton",
                Args = {
                    Name = "Godmode",
                    Callback = function()
                        pcall(function()
                            Player.Character.LowerTorso.Root:Destroy()
                        end)
                    end
                }
            },
            {
                Function = "CreateParagraph",
                Args = {
                    Title = "Notes:",
                    Content = "Your character will be invisible.\n! This cannot be undone! !"
                }
            },
            {
				Function = "CreateSection",
				Args = "━ Anti Aim ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Anti Aim",
					Flag = "_antiaim",
					Callback = function(Value)
						getgenv()._antiaim = Value
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState =  "Look Up",
				Args = {
					Name = "Anti Aim Method",
					Flag = "_antiaimmethod",
					Options = {"Look Up","Look Down","Torso In Legs"},
					CurrentOption = "Look Up",
					Callback = function(Value)
						getgenv()._antiaimmethod = Value
					end,
				}
			},
            {
				Function = "CreateSection",
				Args = "━ Infinite Jump ━"
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Jump",
					Flag = "_infjump",
					Callback = function(Value)
						getgenv()._infjump = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                Args = {
                    Name = "Infinite Jump Height",
                    Flag = "_infjumpheight",
                    CurrentValue = 30,
                    Range = {0, 150},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._infjumpheight = Value
                    end
                }
            }
        },
        ["Misc"] = {
            --[[{
				Function = "CreateSection",
				Args = "━ Chat Spammer ━"
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Chat Spammer",
					Flag = "_chatspammer",
					Callback = function(Value)
						getgenv()._chatspammer = Value
					end,
				}
			},
            {
				Function = "CreateInput",
				_envState =  "mopsHub is best",
				Args = {
					Name = "Spam Message",
                    PlaceholderText = "Spam Message",
					Flag = "_chatspammsg",
                    RemoveTextAfterFocusLost = false,
					Callback = function(Value)
						getgenv()._chatspammsg = Value
					end,
				}
			},]]
            {
                Function = "CreateSection",
                Args = "━ Instant Respawn ━ "
            },
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Instant Respawn",
					Flag = "_autorespawn",
					Callback = function(Value)
						getgenv()._autorespawn = Value
					end,
				}
			},
        },
        ["Settings"] = {
			{
				Function = "CreateSection",
				Args = "━ Script Settings ━"
			},
			{
				Function = "CreateToggle",
				Args = {
					Name = "Auto Load configs",
					CurrentValue = settings.autoLoadConfigs,
					Callback = function (Value)
						settings.autoLoadConfigs = Value
						writefile("/mopsHub/settings_arsenal.mhs", tostring(game:GetService("HttpService"):JSONEncode(settings)))
					end
				}
			},
			{
				Function = "CreateParagraph",
				_envState = false,
				Args = {Title = "Note:",Content = "This means, your recently used settings will automatically load when you execute the script."}
			},
		}
    }

    local _CREDITS = {
		["Developers"] = {
			{"ShyFlooo","Programmer"},
		},
	}

    --Functions | Source: some self made, some from unknown people but edited for my script

    getgenv().updateespvalues = function()
        ESPFramework.Color = ESPSettings.ESPColor
        ESPFramework.ToolColor = ESPSettings.ToolColor
        ESPFramework.Tracers = getgenv()._esptracers
        ESPFramework.Names = getgenv()._espnames
        ESPFramework.Health = ESPSettings.PlayerESP.HealthOn
        ESPFramework.Distance = getgenv()._espdistance
        ESPFramework.Tool = ESPSettings.PlayerESP.ToolOn
        ESPFramework.Boxes = getgenv()._espboxes
        ESPFramework.FaceCamera = ESPSettings.PlayerESP.FaceCamOn
        ESPFramework.TeamMates = getgenv()._espteamcheck
        ESPFramework.AttachShift = getgenv()._esptracerattachshift
        ESPFramework:Toggle(getgenv()._esp)
    end; getgenv().updateespvalues()

    getgenv().getHitPart = function()
        if getgenv()._silentaimhitpart == "Head" then
            return "Head"
        end;
        if getgenv()._silentaimhitpart == "LowerTorso" then
            return "LowerTorso"
        end;
        if getgenv()._silentaimhitpart == "Random" then
            if math.random(1, 4 + 0) == 1 then
                return "Head"
            else
                return "LowerTorso"
            end
        end
    end

    --CREATE WINDOW
	local Window = Rayfield:CreateWindow({
		Name = "mopsHub - Arsenal",
		LoadingTitle = "mopsHub - Arsenal",
		LoadingSubtitle = "by ShyFlooo",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "/mopsHub/.config", -- Create a custom folder for your hub/game
			FileName = "mopshub_arsenal"
		}, 
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "mopsHub - Arsenal",
			Subtitle = "Key System",
			Note = "Key here (copied): discord.gg/g4EGAwjUAK",
			FileName = "MOPSHUBKEY",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = ""
		}
	})

	--SETUP WINDOW
	for index, name in pairs(_TABS) do
		local w = Window:CreateTab(name)
		getgenv()._WINDOW.Tabs[name] = w
	end
    getgenv()._WINDOW.Tabs["Credits"]:CreateSection("━ Credits ━")
	for index, value in pairs(_CREDITS) do
		local content = ""
		for i,data in pairs(value) do
			if #data[2] > 0 then
				content = content.."\n"..data[1].." - ".. data[2]
			else
				content = content.."\n"..data[1]
			end
		end
		getgenv()._WINDOW.Tabs["Credits"]:CreateParagraph({Title = index, Content = content})
	end

	for index, funcs in pairs(_FUNCTIONS) do
		print("Loaded "..#funcs.." function(s) for ".. index)
		for i, func in pairs(funcs) do
			if func.Function and func.Args then
				local Tab = getgenv()._WINDOW.Tabs[index]
				if Tab then
					local s,e = pcall(function()
						local f,l = func.Function, true
						if f == "CreateSection" then
							Tab:CreateSection(func.Args)
						elseif f == "CreateButton" then
							Tab:CreateButton(func.Args)
						elseif f == "CreateToggle" then
							Tab:CreateToggle(func.Args)
						elseif f == "CreateDropdown" then
							Tab:CreateDropdown(func.Args)
						elseif f == "CreateInput" then
							Tab:CreateInput(func.Args)
						elseif f == "CreateSlider" then
							Tab:CreateSlider(func.Args)
						elseif f == "CreateParagraph" then
							Tab:CreateParagraph(func.Args)
						elseif f == "CreateLabel" then
							Tab:CreateLabel(func.Args)
						elseif f == "CreateKeybind" then
							Tab:CreateKeybind(func.Args)
						else
							l = false
						end; if l == true then
							--print("Created function "..tostring(func.Args.Flag or func.Args or "unknown").. " for ".. index.. " ["..string.gsub(func.Function, "Create", "").. "]")
						else
							print("Unable to create "..tostring(func.Function).. " function for ".. index .. " ["..i.."]")
						end
						if func.Args.Flag then
							--print("Creating env ".. tostring(func.Args.Flag) .. " with the value ".. tostring(func._envState))
							getgenv()[func.Args.Flag] = func._envState
						end
					end)
					if not s and e then
						print("[mopsHub UI Loader Error]: > "..e)
					end
				end
			end
		end
	end

	--> MAIN

    local function GetEnemys()
        local IsHackula = function()
            if game.Workspace:FindFirstChild("Map") then
                if game.Workspace.Map:FindFirstChild("Hackula") then
                    if game.Workspace.Map.Hackula:FindFirstChild("Head") then
                        return true
                    end
                end
            end
            return false
        end

        local plrs = {}
        if not IsHackula() then
            if not game.ReplicatedStorage.wkspc.Status.RoundOver.Value and not game.ReplicatedStorage.wkspc.Status.Preparation.Value and Player.Status.Team.Value ~= "Spectator" then
                for _,v in pairs(game.Players:GetChildren()) do
                    if (v.Team~=Player.Team or game.ReplicatedStorage.wkspc.FFA.Value) and v ~= Player then
                        if v.Character and not v.Character:FindFirstChild("ShuckyHAX") and v.Character:FindFirstChild("Spawned") then
                            table.insert(plrs,v)
                        end
                    end
                end
            end
        else
            table.insert(plrs, {Character=game.Workspace.Map.Hackula})
        end
        return plrs
    end

    --Anti Aim | Source: self made

    local old;
    old = hookmetamethod(game, "__namecall", function(self, ...)
        local Args = { ... }
        if getnamecallmethod() == "FireServer" and tostring(self) == "ControlTurn" then
            if getgenv()._antiaim then
                if getgenv()._antiaimmethod == "Look Up" then
                    Args[1 + 0] = 1.3962564026167
                end;
                if getgenv()._antiaimmethod == "Look Down" then
                    Args[1] = - 1.5962564026167
                end;
                if getgenv()._antiaimmethod == "Torso In Legs" then
                    Args[1] = - 6.1
                end;
                if getgenv()._antiaimmethod == "__test__aam" then
                    Args[1] = getgenv().__test__aam_t
                end;
                return old(self, unpack(Args))
            end
        end;
        return old(self, ...)
    end)

    --FOV
    local FOVCircle
    if Drawing then
        FOVCircle = Drawing.new("Circle")
        FOVCircle.Thickness = 2
        FOVCircle.NumSides = 50
        FOVCircle.Filled = false
        FOVCircle.Transparency = 0.6
        FOVCircle.Radius = getgenv()._fov;
        FOVCircle.Color = Color3.new(0, 0.764705, 1)
    else
        warn("[mopsHub Loader Error]: Missing function Drawing. Your executor might be too bad and doesn't support it! (Show FOV disabled)")
    end

    --Walkspeed Changer | Source: self made

    local smt = getrawmetatable(game)
    setreadonly(smt, false)
    local wold = smt.__index
    smt.__index = newcclosure(function(a, b)
        if b == "WalkSpeed" then
            return getgenv()._walkspeed
        end
        return wold(a, b)
    end)
    
    --Infinite Jump | Source: idk

	local function Action(Object, Function) if Object ~= nil then Function(Object); end end

	game:GetService('UserInputService').InputBegan:Connect(function(UserInput)
		if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
			if not getgenv()._infjump then return end
			Action(Player.Character.Humanoid, function(self)
				if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
					Action(self.Parent.HumanoidRootPart, function(self)
						self.Velocity = Vector3.new(0, getgenv()._infjumpheight or 50, 0);
					end)
				end
			end)
		end
	end)

    --Gun Mods | Source: self made

    for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetChildren()) do
        if v.ClassName == "Folder" then
            local __ = table.insert(standard_firerate_values, v.Name)
            standard_firerate_values[v.Name] = v.FireRate.Value
        end
    end;
    
    RunService.Stepped:Connect(function()
        if Drawing and FOVCircle ~= nil then
            FOVCircle.Position = game:GetService("UserInputService"):GetMouseLocation()
            FOVCircle.Radius = getgenv()._fov;
            FOVCircle.Visible = getgenv()._showfov;
        end
        if getgenv()._rainbowgun then
            pcall(function()
                for _, v in pairs(game.Workspace.Camera.Arms:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.Color = Color3.fromHSV(tick() % 5 / 5, 1 + 0, 1)
                        v.Transparency = 0.5
                        v.Material = "ForceField"
                    end
                end
            end)
        end

        if getgenv()._killaura then
            for _,v in pairs(GetEnemys())do
                if (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude < 50 then
                    ReplicatedStorage.Events.Burn:FireServer(v.Character.Head,ReplicatedStorage.Weapons["Acid Spitter"],1,v.Character.Head.Position+Vector3.new(math.random(),math.random(),math.random()))
                end
            end
        end
    end)

    task.spawn(function()
        while task.wait() do
            if getgenv()._norecoil then
                getsenv(Player.PlayerGui.GUI.Client.Functions.Weapons).recoil = 0
            end
            if getgenv()._nospread then
                getsenv(Player.PlayerGui.GUI.Client.Functions.Weapons).currentspread = {
                    ["Value"] = 0
                }
            end
            if getgenv()._rapidfire then
                for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetChildren()) do
                    if v:FindFirstChild("FireRate") then
                        v:FindFirstChild("FireRate").Value = 0.01001
                    end
                end
            else
                for _, v in pairs(game:GetService("ReplicatedStorage").Weapons:GetChildren()) do
                    if v:FindFirstChild("FireRate") then
                        v:FindFirstChild("FireRate").Value = standard_firerate_values[v.Name]
                    end
                end
            end
            if getgenv()._infammo then
                if require(Player.PlayerGui.GUI.Client.Functions.Weapons).getprimaryammo() then
                    if require(Player.PlayerGui.GUI.Client.Functions.Weapons).getprimaryammo() == 0 then
                        getsenv(Player.PlayerGui.GUI.Client.Functions.Weapons).ammocount.Value = 6
                    else
                        getsenv(Player.PlayerGui.GUI.Client.Functions.Weapons).ammocount.Value = require(Player.PlayerGui.GUI.Client.Functions.Weapons).getprimaryammo()
                    end
                end
            end
            if getgenv()._automatic then
                getsenv(Player.PlayerGui.GUI.Client.Functions.Weapons).mode = "automatic"
            end
            if getgenv()._chatspammer then
                game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer("Hah!", getgenv()._chatspammsg, false, false, true)
            end
            if getgenv()._autorespawn then
                Client.reviveme = true
            end
        end
    end)

    if settings.autoLoadConfigs then
		Rayfield:LoadConfiguration()
	end
end)
if not s and e then
    print("[mopsHub Error]: "..e)
end
